## 2022-08-01
# Copying plugins into www/js folder

deps=$(find plugins -name "*.js" -type f)
for dep in $deps; do
  filepath=$(echo $dep | cut -d'/' -f2,3)
  dirpath=$(echo $dep | cut -d'/' -f2)
  mkdir -p www/js/$dirpath
  cp -rf $dep www/js/$filepath
done

## 2022-08-02
# Experimenting with webpack ... unfortunately

# install webpack generally
sudo npm install webpack webpack-cli --global

# build webpack dist
webpack build ./index.js
# - Need to install modules: fs path stream zlib
# npm install fs path stream zlib --save-dev

# serve webpack
npx webpack serve

## Forget all that.. Just do this for the voxelmetaverse project:
npm install beefy
npm run start

## 2022-08-03
# Replace voxel-engine-stackgl with voxel-engine

files=$(grep -raw "voxel-engine-stackgl" | cut -d':' -f1)
for file in $files; do
  sed -i 's/voxel-engine-stackgl/voxel-engine/g' $file
done
rm -rf node_modules/voxel-engine-stackgl
npm install
npm run start

## 2022-08-12
# need to change calls to gl with calls to three.js
# looks like current errors relate to using gl vs three.js

## 2022-08-15
# The issue with the item collisions was because the collideTerrain
#  method from voxel-engine-stackgl used the wrong vec format for
#  the collisions function

####
# voxel-view initializes renderer
# accepts scene to link to scene (not sure how THREE.view works...)

## 2022-09-08
# mesh.js for creating voxel meshes
# current problem with artpacks appears to be because of url loading, not
# actually getting the artpack data, which has already been loaded.

## 2022-09-09
# I suspect the arguments in webworkify.js correspond to the arguments passed to
# '.call' in the initial function of builtgame.js

## 2022-09-19
# The issue with loading blob images turned out to be how buffer-io.toBuffer was
# incorrectly merging the buffer segments

## 2022-09-27
# Now, everything seems to run, but no 3d images ever show up
# current line of inquiry :: mcmeta.js, voxel-stitch.js, atlaspack.js
# after digging, found generateChunks flag == false; setting to true openned new errors

## 2022-09-28
# in voxel-engine.showChunk, the voxelArray has different dimensions from the
# "solidVoxels" stored in voxel-mesher.
#  - voxelArray is 34x34x34
#  - solidVoxels is 36x36x36

## 2022-09-29
# the solution to that issue appears to be change in padding between then and now
# - TODO: find general solution to this such that we don't encounter this issue again... ever

## 2022-09-30
# the latest issue with the rendering logic was a join("n") needed to be join("\n")

## 2022-10-02
# voxel-outline plugin has error in shader-cache with WebGLRenderingContext.linkProgram

## 2022-10-10
# voxel.js -> generateVoxelChunk input params do not match the call to it in chunker.js
#  - given that generateVoxelChunk is also set to "valley", perhaps this is why
#    the default generation is so whacked.

## 2022-10-11
# actually, that is apparently how generateVoxelChunk is supposed to work in chunker.js (on previous note)
# actually, voxel-land is where the terrain is generated in a separate worker thread
#  the worker thread appears to be being sent generateChunk events whenever a missingChunk is requested
#  however, no chunks are coming back from that thread
# Note :: this is the same worker thread which I had to do a lot of tinkering with webworkify

## 2022-10-12
# fixed the issue from yesterday by modifying the webworkify.js file.

## 2022-10-18
# apparently, the issue with the voxel-outline plugin was because a specific part
# initializing the gpu code expected a certain variable to be a certain value,
# but it wasn't, so the code crashed in that particular part.
# - attributeLocations was expected to be [0, 1], but was [0, 0] for unknown reasons
# - temporary solution was to add some logic to check for this case and correct it

## 2022-10-26
# voxel-controls contains loop that monitors for mouse-hold
# game-shell is supposed to keep track of which buttons are pressed on keyboard
#  and on mouse.  Not sure it does this right, though.  A failure somewhere in
#  there appears to be causing the break-block feature to fail.
# The issue was that binary-search-bounds.js was malformed during the initial transfer
#  and was missing escapes in certain places.

## 2022-10-30
# fireRate option has been found to not correctly correlate to rate of fire Events
# Rather, a higher fireRate means shorter time to block breaking and a slower
#  fireRate means longer time to block breaking.
# Related - voxel-controls:onfire does not appear to be being called within voxel-controls
#  however; fire events are being sent out.
